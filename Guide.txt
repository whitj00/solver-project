-----
Types
-----

SolveLang has 3 user-instantiable primitive types:
- Num: an integer.
- List: a heterogenous linked list
- Bool: true or false

Types are non-nullable

-----
Lists
-----

Create a list with the `list` function:
    (list 1 2 3 4) -> [1; 2; 3; 4;]

Lists can be heterogenous:
    (list 1 true) -> [1; true]

Or n-dimensional:
    (list (list 1 2) (list 3 4)) -> [[1; 2]; [3; 4]]

Access their values with `val`:
    (val 1 (list 0 1 2)) -> 1

We can do the same for n-dimensional lists:
    (val 1 (val 0 (list (list 0 1 2) 4)) -> 2

Lists can be empty:
    (list) -> []

--------
Booleans
--------

Any positive integer is truthy

Boolean operations are available for AND, OR, NOT, and EQUALS
    (and true true)  -> true
    (and true false) -> false
    (or true false)  -> true
    (or false false) -> false
    (not true)       -> false
    (not false)      -> true
    (= true true)    -> true

(=) is overloaded and will also evaluate integer equality. Comparing an integer and boolean will cause an error

Boolean operators will work for any arbitrary number of arguments:
    (and true true false) -> false
    (or false false true) -> true
    (= true true false)   -> false

----
Math
----

Integer arithmetic functions are provided for addition, multiplication, subtraction, and division:
    (+ 1 2) -> 3
    (- 2 1) -> 1
    (* 2 4) -> 8
    (/ 4 2) -> 2

Division will always result in an integer:
    (/ 4 3) -> 1

Integer arithmetic will work for any arbitrary number of arguments:
    (+ 2 3 4)  -> 9
    (- 5 2 1)  -> 3
    (* 2 4 2)  -> 16
    (/ 16 2 4) -> 2

Integer comparison operations are also available:
    (> 2 1)  -> true
    (< 1 2)  -> true
    (>= 2 2) -> true
    (<= 2 2) -> true
    (= 2 2)  -> true
